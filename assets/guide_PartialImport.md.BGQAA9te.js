import{_ as s,c as i,a2 as t,o as e}from"./chunks/framework.B80iA3s1.js";const n="/MonacoEditorDocs/statics_language.png",g=JSON.parse('{"title":"部分导入","description":"","frontmatter":{},"headers":[],"relativePath":"guide/PartialImport.md","filePath":"guide/PartialImport.md","lastUpdated":1729848186000}'),p={name:"guide/PartialImport.md"};function l(o,a,r,h,d,c){return e(),i("div",null,a[0]||(a[0]=[t('<h1 id="部分导入" tabindex="-1">部分导入 <a class="header-anchor" href="#部分导入" aria-label="Permalink to &quot;部分导入&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在快速上手部分，我们使用以下语句导入了依赖</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> monaco </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;monaco-editor&#39;</span></span></code></pre></div><p>但需注意的是：<strong>此为全部导入</strong>，即将 Monaco 中所有的功能及语言都导入并生成最终构建产物，因此当您的项目构建完成时，您会在静态资源中发现有很多的 js 文件，细细观察即可发现此为自带的语言，如下：</p><p><img src="'+n+`" alt="构建产物图"></p><p>这对于一个简单、小型的 JavaScript 编辑器来说非常非常的重，因此我们有必要进行导入优化来排除那些我们不需要的依赖，做到最小化的构建一个项目</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>以下内容参考自 <a href="https://juejin.cn/post/7133041161618325512#heading-0" target="_blank" rel="noreferrer">@GeorgeWhite</a> ，详情可前往进行查看；以下包含案例均以可以正常实现一个 JavaScript 编辑器为目标</p></div><h2 id="使用-vite-打包" tabindex="-1">使用 Vite 打包 <a class="header-anchor" href="#使用-vite-打包" aria-label="Permalink to &quot;使用 Vite 打包&quot;">​</a></h2><p>Vite 端虽然也有 <a href="https://github.com/vdesjs/vite-plugin-monaco-editor" target="_blank" rel="noreferrer">vite-plugin-monaco-editor</a> 插件，但是该插件并不像官方提供的 WebPack 插件一样可以通过配置指定需要开启的语言和特性，且该插件已有将近两年未更新，因此暂时放弃</p><p>Rollup 端虽然也有 <a href="https://github.com/chengcyber/rollup-plugin-monaco-editor" target="_blank" rel="noreferrer">rollup-plugin-monaco-editor</a> 插件，同时该插件也可以同官方一样配置指定需要开启的语言和特性，但该插件仅支持 <code>monaco v0.34.0</code> 及以下的版本，故放弃</p><h3 id="导入核心功能" tabindex="-1">导入核心功能 <a class="header-anchor" href="#导入核心功能" aria-label="Permalink to &quot;导入核心功能&quot;">​</a></h3><p>在官方文档中 <a href="https://github.com/microsoft/monaco-editor/tree/main/webpack-plugin" target="_blank" rel="noreferrer">webpack-plugin</a> 处有提到如果只需要部分功能和语言的子集可以这样导入：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> monaco </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;monaco-editor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or import * as monaco from &#39;monaco-editor/esm/vs/editor/editor.api&#39;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if shipping only a subset of the features &amp; languages is desired</span></span></code></pre></div><p>使用以上第二行导入方式后我们可以发现编译后的产物不再包含语言文件，且当运行项目时发现语法高亮、输入关联提醒等功能失效，这是因为我们目前没有引入语言及功能特性导致的</p><p>首先我们需要了解 Monaco 中携带了哪些特性及语言，可以去 <code>node_modules\\monaco-editor\\esm\\metadata.js</code> 路径下的该文件查看对应特性及语言，以下是个人理解对应字段代表的功能特性：</p><details class="details custom-block"><summary>功能特性详情</summary><table tabindex="0"><thead><tr><th style="text-align:center;">label</th><th style="text-align:center;">description</th></tr></thead><tbody><tr><td style="text-align:center;">accessibilityHelp</td><td style="text-align:center;"></td></tr></tbody></table></details><h3 id="导入所需语言" tabindex="-1">导入所需语言 <a class="header-anchor" href="#导入所需语言" aria-label="Permalink to &quot;导入所需语言&quot;">​</a></h3><p><code>metadata.js</code> 文件中包含了语言的 entry 文件，因此如果想要导入指定的语言的话只要按该路径导入即可，如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;monaco-editor/esm/vs/basic-languages/javascript/javascript.contribution&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;monaco-editor/esm/vs/basic-languages/typescript/typescript.contribution&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;monaco-editor/esm/vs/language/typescript/monaco.contribution&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>导入之后发现语法高亮可以正常使用了，但是没有输入提示，因此需要导入特定的功能特性</p><h3 id="导入功能特性" tabindex="-1">导入功能特性 <a class="header-anchor" href="#导入功能特性" aria-label="Permalink to &quot;导入功能特性&quot;">​</a></h3><p><code>metadata.js</code> 文件中包含了特性的 entry 文件，因此按自己所需导入指定的功能特性即可，如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入代码折叠特性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;monaco-editor/esm/vs/editor/contrib/folding/browser/folding&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="使用-webpack-打包" tabindex="-1">使用 Webpack 打包 <a class="header-anchor" href="#使用-webpack-打包" aria-label="Permalink to &quot;使用 Webpack 打包&quot;">​</a></h2><p>使用 Webpack 打包工具时，官方提供了专门的插件来简化以上步骤，可以前往 <a href="https://github.com/microsoft/monaco-editor/tree/main/webpack-plugin" target="_blank" rel="noreferrer">Monaco Editor Webpack Loader Plugin</a> 进行查看，仅需要在插件配置中指定你所需要引入的语言和功能特性即可</p>`,26)]))}const m=s(p,[["render",l]]);export{g as __pageData,m as default};
