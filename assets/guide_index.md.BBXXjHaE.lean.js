import{_ as o,c as a,a2 as r,o as t}from"./chunks/framework.B80iA3s1.js";const u=JSON.parse('{"title":"介绍","description":"","frontmatter":{"sidebarDepth":2},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md","lastUpdated":1729848186000}'),i={name:"guide/index.md"};function l(s,e,n,d,c,h){return t(),a("div",null,e[0]||(e[0]=[r('<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p><strong>Monaco 编辑器</strong>（以下均以 Monaco 代指）是一款用来支持 VS Code 的代码编辑器，它提供了大部分 VS Code 中所支持的功能，同时也内置了非常多的常用编程语言用以语法高亮。使用它可以在 Web 项目中快速实现代码编辑等功能，但目前仅支持 Edge、Chrome、FireFox、Safari 和 Opera 等 Web 端浏览器，移动端浏览器并不支持。</p><p>使用过该编辑器或即将打算学习该编辑器的开发者大都有这种困恼：<strong>官方文档读起来非常的晦涩，无法快速上手使用该编辑器</strong>。本文档就是在笔者学习使用的过程中进行了翻译与整理得来的，但因个人精力有限，目前还在持续更新中~</p><h2 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h2><p>本文档仅基于编写时的最新版本 <a href="https://www.npmjs.com/package/monaco-editor/v/0.45.0" target="_blank" rel="noreferrer">v0.45.0</a>为基准，当当前版本补充完成时即停止更新。后续若官方有更新时可参考该文档进行查看，目前并未有多版本整理的计划。</p><h2 id="标识" tabindex="-1">标识 <a class="header-anchor" href="#标识" aria-label="Permalink to &quot;标识&quot;">​</a></h2><p>在编写文档时，对于有特殊含义的内容会有 <code>Emoji</code> 来标识，除非特殊说明，则一般按以下定义为主：</p><p>✅：标识为必选参数，不标识该表情则默认为可选参数</p><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p>虽然 Monaco 可以很好的驱动 VSCode，但仍建议您在使用 Monaco 之前详细了解以下概念定义，才能更有效的使用 Monaco</p></div><p>本部分内容是对 <a href="https://github.com/microsoft/monaco-editor?tab=readme-ov-file#concepts" target="_blank" rel="noreferrer">官方描述</a> 进行了翻译</p><h3 id="模型-models" tabindex="-1">模型（Models） <a class="header-anchor" href="#模型-models" aria-label="Permalink to &quot;模型（Models）&quot;">​</a></h3><p>Monaco 的核心就是模型了，每个模型都是唯一的，模型可以代指一个已经打开的文件，如使用 VSCode 打开一个 <code>.js</code> 文件；也可以代指一个虚拟创建出来的用于保存文本内容的文件</p><p>您可以通过模型相关的 API 来更新文本内容，或为当前模型设置其对应的编程语言，或跟踪内容的编辑历史记录</p><h3 id="统一资源定位符-uris" tabindex="-1">统一资源定位符（URIs） <a class="header-anchor" href="#统一资源定位符-uris" aria-label="Permalink to &quot;统一资源定位符（URIs）&quot;">​</a></h3><p>每个模型都是由一个 URI 进行标识的，这就是为什么不同的模型不可能具有相同的 URI 的原因。因此，建议开发者在 Monaco 中展示代码内容时，应该考虑到用户正在编辑的文件所匹配的虚拟文件系统应该是什么。例如可以使用本地文件访问协议 <code>file:///</code> 来作为一个基本的文件访问路径</p><p>但是如果在没有 URI 的情况下创建了模型，则该模型的 URI 将是 <code>inmemory://model/1</code> 且会随着模型的增多自动增加其数字</p><h3 id="编辑器-editors" tabindex="-1">编辑器（Editors） <a class="header-anchor" href="#编辑器-editors" aria-label="Permalink to &quot;编辑器（Editors）&quot;">​</a></h3><p>编辑器即面向用户的一个模型视图，它是实实在在渲染到了对应的 DOM 节点上的内容，而非常典型的编辑器操作大概有如下几个，包括：</p><ul><li>显示模型内容</li><li>管理视图状态</li><li>执行指定的操作或命令</li></ul><h3 id="注入器-providers" tabindex="-1">注入器（Providers） <a class="header-anchor" href="#注入器-providers" aria-label="Permalink to &quot;注入器（Providers）&quot;">​</a></h3><p>注入器可以为编辑器提供智能编辑功能，如：鼠标悬浮时的提示信息，代码自动补全，代码格式校验等</p><p>注入器和<strong>语言服务通信协议</strong>（<a href="https://microsoft.github.io/language-server-protocol/" target="_blank" rel="noreferrer">Language Server Protocol</a>）不同，但通常都会映射到语言服务通信协议上</p><p>注入器通常是运行在<strong>模型</strong>上的，同时某些智能功能取决于文件所对应的 URI 的。如：TypeScript 用于解析导入，JSON IntelliSense 用于确定模型应该应用哪个 JSON 架构。因此，选择对应的模型 URI 是非常重要的</p><h3 id="一次性物品-disposables" tabindex="-1">一次性物品（Disposables） <a class="header-anchor" href="#一次性物品-disposables" aria-label="Permalink to &quot;一次性物品（Disposables）&quot;">​</a></h3><p>许多与 Monaco 相关的对象通常都实现了 <code>.dispose()</code> 方法。该方法用于某些资源在不再需要时对其执行清理操作。如：当你调用 <code>model.dispose()</code> 时将注销掉对应模型，从而释放新模型的 URI。编辑器应该在合适的时机将其资源释放掉并删除其的模型监听器</p><h3 id="语法高亮引擎-monarch" tabindex="-1">语法高亮引擎（Monarch） <a class="header-anchor" href="#语法高亮引擎-monarch" aria-label="Permalink to &quot;语法高亮引擎（Monarch）&quot;">​</a></h3><p>Monarch 是一个用于语法高亮和代码块解析的通用解决方案。</p><p>Monarch 使用一种简单的可跨平台的基于 JSON 的描述语法来定义语法规则。通过定义词法和语法规则，它可以根据这些规则对代码进行分词（Tokenization）和高亮显示。开发人员可以使用 Monarch 来为各种编程语言和标记语言创建自定义的语法高亮。</p><p>Monarch 规定了一种编程语言所需要的 <strong>关键字（keyword）、变量（variable）、操作符（operator）、分词器（tokenizer）</strong> 等内容：</p><ul><li><strong>关键字（keyword）</strong>：即语言的内置关键字，如 JAVA 语言中的 <code>public/private</code> 等</li><li><strong>变量（variable）</strong>：一门语言通常都可定义其变量与常量</li><li><strong>操作符（operator）</strong>：表达式中的操作符，如 <code>=/+/-</code> 等</li><li><strong>分词器（tokenizer）</strong>：可描述为一组正则表达式的分词规则，可根据对应的正则表达式来识别不同的内容，如：关键词、括号、注释块等内容并进行相应的高亮</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>Monarch 相关内容可前往深入用法中的 <a href="/MonacoEditorDocs/guide/Monarch.html">Monarch</a> 进行详细查看</p></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p>本文编写时主要参考如下几个网站与内容，同时也感谢各位的付出</p><ul><li><a href="https://microsoft.github.io/monaco-editor/" target="_blank" rel="noreferrer">Monaco Editor 官网</a></li><li><a href="https://github.com/microsoft/monaco-editor" target="_blank" rel="noreferrer">Monaco Editor 源码</a></li><li><a href="https://github.com/microsoft/monaco-editor/issues" target="_blank" rel="noreferrer">Monaco Editor issue</a></li><li><a href="http://aydk.site/" target="_blank" rel="noreferrer">Monaco editor 学习文档</a></li></ul><h2 id="关于" tabindex="-1">关于 <a class="header-anchor" href="#关于" aria-label="Permalink to &quot;关于&quot;">​</a></h2><p>本文档目前是基于 <a href="https://vitepress.dev/zh/" target="_blank" rel="noreferrer">VitePress v1.x</a> 进行生成的，如果您在查阅中发现有任何问题，可以点击对应页面底部的 <code>在 GitHub 上编辑此页</code> 进行修改并发送 PR，感谢您对文档翻译的贡献</p>',37)]))}const b=o(i,[["render",l]]);export{u as __pageData,b as default};
