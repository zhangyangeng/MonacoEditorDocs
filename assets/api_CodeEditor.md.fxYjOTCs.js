import{_ as i,c as t,a2 as a,o as e}from"./chunks/framework.B80iA3s1.js";const g=JSON.parse('{"title":"CodeEditor","description":"","frontmatter":{},"headers":[],"relativePath":"api/CodeEditor.md","filePath":"api/CodeEditor.md","lastUpdated":1729848186000}'),n={name:"api/CodeEditor.md"};function l(h,s,p,d,k,r){return e(),t("div",null,s[0]||(s[0]=[a(`<h1 id="codeeditor" tabindex="-1">CodeEditor <a class="header-anchor" href="#codeeditor" aria-label="Permalink to &quot;CodeEditor&quot;">​</a></h1><p>对应接口中的 <a href="./待更新.html">ICodeEditor</a>，可理解为一个<strong>富文本代码编辑器</strong>（下文都将以<strong>编辑器</strong>进行描述），即通过 <code>monaco.editor.create()</code> 方法返回的实例</p><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> monaco </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;monaco-editor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> monacoGrph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;monacoGraph&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> editor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> monaco.editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monacoGrph, {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    language: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;javascript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    theme: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vs-dark&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;const a = 1;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">console.log(a);&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="dispose" tabindex="-1">dispose() <a class="header-anchor" href="#dispose" aria-label="Permalink to &quot;dispose()&quot;">​</a></h3><p>销毁编辑器</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>参数</strong></p><ul><li>无</li></ul><p><strong>返回值</strong></p><ul><li>无</li></ul><h3 id="getvalue" tabindex="-1">getValue() <a class="header-anchor" href="#getvalue" aria-label="Permalink to &quot;getValue()&quot;">​</a></h3><p>获取当前编辑器中的所有文本内容（即所有代码内容）</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EndOfLinePreference, preserveBOM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean): string;</span></span></code></pre></div><p><strong>参数</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">eol</td><td style="text-align:center;"><a href="./.html">EndOfLinePreference</a></td><td style="text-align:center;">-</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">preserveBOM</td><td style="text-align:center;">boolean</td><td style="text-align:center;">-</td><td style="text-align:center;"></td></tr></tbody></table><p><strong>返回值</strong></p><ul><li>string：文本内容</li></ul><h3 id="setmodel" tabindex="-1">setModel() <a class="header-anchor" href="#setmodel" aria-label="Permalink to &quot;setModel()&quot;">​</a></h3><p>将当前的模型设置附加到当前编辑器上</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model: ITextModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">注意：</p><p>如果之前的模型是由编辑器通过 <code>option选项</code> 对象中的 value 值创建的，那么之前的模型将被销毁。</p><p>如果之前的模型是通过 <code>setModel()</code> 方法设置的，或者是 <code>option选项</code> 对象中的 model 值创建的，则之前的模型将不会被销毁。</p><p>可参考以下样例：</p></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 value 值创建：√</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">monaco.editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monacoGrph, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    language: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;javascript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    theme: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vs-dark&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;const a = 1;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">console.log(a);&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 setModel() 方法创建：×</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">monaco.editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;const a = 2;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 model 值创建：×</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">monaco.editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(monacoGrph, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    language: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;javascript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    theme: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vs-dark&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>参数</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名</th><th style="text-align:center;">类型</th><th style="text-align:center;">选择</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">model</td><td style="text-align:center;"><a href="./.html">ITextModel</a></td><td style="text-align:center;">null</td><td style="text-align:center;">必选</td></tr></tbody></table><p><strong>返回值</strong></p><ul><li>无</li></ul><h3 id="setvalue" tabindex="-1">setValue() <a class="header-anchor" href="#setvalue" aria-label="Permalink to &quot;setValue()&quot;">​</a></h3><p>将当前的代码内容设置到当前编辑器上，即替换整个编辑器内容</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newValue: string): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>参数</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名</th><th style="text-align:center;">类型</th><th style="text-align:center;">选择</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">newValue</td><td style="text-align:center;">string</td><td style="text-align:center;">必选</td><td style="text-align:center;">新的代码内容</td></tr></tbody></table><p><strong>返回值</strong></p><ul><li>无</li></ul><h3 id="updateoptions" tabindex="-1">updateOptions() <a class="header-anchor" href="#updateoptions" aria-label="Permalink to &quot;updateOptions()&quot;">​</a></h3><p>更新当前编辑器的初始化配置</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newOptions: IEditorOptions): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>参数</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">newOptions</td><td style="text-align:center;"><a href="./.html">IEditorOptions</a></td><td style="text-align:center;">-</td><td style="text-align:center;"></td></tr></tbody></table><p><strong>返回值</strong></p><ul><li>无</li></ul><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><h3 id="ondidchangecursorposition" tabindex="-1">onDidChangeCursorPosition <a class="header-anchor" href="#ondidchangecursorposition" aria-label="Permalink to &quot;onDidChangeCursorPosition&quot;">​</a></h3><p>当编辑器中的鼠标光标位置发生改变时触发的事件</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onDidChangeCursorPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ICursorPositionChangedEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> any)</span></span></code></pre></div>`,46)]))}const E=i(n,[["render",l]]);export{g as __pageData,E as default};
