import{_ as s,E as i,c as l,m as t,a,J as n,w as o,a4 as h,o as r}from"./chunks/framework.CwR7lFEW.js";const M=JSON.parse('{"title":"Monarch","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Monarch.md","filePath":"guide/Monarch.md","lastUpdated":1709550520000}'),d={name:"guide/Monarch.md"},c=t("h1",{id:"monarch",tabindex:"-1"},[a("Monarch "),t("a",{class:"header-anchor",href:"#monarch","aria-label":'Permalink to "Monarch"'},"​")],-1),p=t("strong",null,"Monarch",-1),g=t("code",null,"JSON",-1),k=h(`<p>如果您尝试一些高级用法，如下一小节的<a href="./CustomLanguage.html#自定义语言">自定义语言</a>，那么 Monarch 相关内容建议您仔细阅读，这对您后续的使用将有极大的帮助</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>本部分参考自官方文档的 <a href="https://microsoft.github.io/monaco-editor/monarch.html" target="_blank" rel="noreferrer">Monarch</a>，若翻译或描述不准确都可前往官方文档进行查看</p></div><h2 id="创建语言定义" tabindex="-1">创建语言定义 <a class="header-anchor" href="#创建语言定义" aria-label="Permalink to &quot;创建语言定义&quot;">​</a></h2><p>语言定义的数据结构就是一个 JSON 值，该值内部可以描述语言的各种属性，目前可识别的属性如下：</p><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">描述</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">tokenizer✅</td><td style="text-align:left;">分词器，定义分词相关规则</td><td style="text-align:left;">Record&lt;[name: string], <a href="./.html">IMonarchLanguageRule[]</a>&gt;</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">ignoreCase</td><td style="text-align:left;">语言是否不区分大小写，分词器中的正则表达式会使用该选项来执行区分大小写的匹配，以及 cases 分支中的测试</td><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">defaultToken</td><td style="text-align:left;">若使用分词器没有匹配到对应内容，则会返回默认值。建议在着色器开发过程中将其设置为 <code>invalid</code> 可以更轻松的发现未匹配的内容</td><td style="text-align:left;">string</td><td style="text-align:left;">source</td></tr><tr><td style="text-align:left;">brackets</td><td style="text-align:left;">分词器可根据该设置项轻松的定义匹配的大括号</td><td style="text-align:left;"><a href="./.html">IMonarchLanguageBracket[]</a></td><td style="text-align:left;">-</td></tr></tbody></table><p>一个简单定义的例子如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;tokenizer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.*?&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>更多属性请前往 <a href="/MonacoEditorDocs/interface/Language.html#IMonarchLanguage">IMonarchLanguage</a> 查看</p><h2 id="创建分词器" tabindex="-1">创建分词器 <a class="header-anchor" href="#创建分词器" aria-label="Permalink to &quot;创建分词器&quot;">​</a></h2>`,9);function f(u,E,y,_,m,x){const e=i("font");return r(),l("div",null,[c,t("blockquote",null,[t("p",null,[p,a(" 是一个使用 "),g,a(" 来创建声明性的语法高亮器，同时也是一个通用的解决方案。该方案可以指定具有复杂状态转换、动态大括号匹配、自动完成、嵌入其他语言等高亮行为，这些都将在以下标注为 "),t("strong",null,[n(e,{color:"red"},{default:o(()=>[a("高级")]),_:1})]),a(" 的部分提到，但建议初学者学习时可以跳过相关描述。")])]),k])}const C=s(d,[["render",f]]);export{M as __pageData,C as default};
